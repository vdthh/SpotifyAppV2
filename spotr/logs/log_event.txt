
2022-06-03 22:31:07.660994 spotify.py - getNewAccessToken --> <class 'TypeError'> - ("abspath() missing 1 required positional argument: 'path'",) - abspath() missing 1 required positional argument: 'path'
2022-06-03 22:31:07.661994 TRACEBACK --> Traceback (most recent call last):
  File "e:\docs\phyton projects\SpotifyWebAppV2.0\spotr\spotify.py", line 34, in getNewAccessToken
    folder_name = os.path.abspath()
TypeError: abspath() missing 1 required positional argument: 'path'

2022-06-03 22:31:23.707337 spotify.py - getNewAccessToken --> <class 'TypeError'> - ("abspath() missing 1 required positional argument: 'path'",) - abspath() missing 1 required positional argument: 'path'
2022-06-03 22:31:23.707337 TRACEBACK --> Traceback (most recent call last):
  File "e:\docs\phyton projects\SpotifyWebAppV2.0\spotr\spotify.py", line 35, in getNewAccessToken
    folder_name = os.path.abspath()
TypeError: abspath() missing 1 required positional argument: 'path'

2022-06-03 22:34:03.101738 spotify.py - getNewAccessToken --> <class 'OSError'> - (22, 'Invalid argument') - [Errno 22] Invalid argument: 'e:\\docs\\phyton projects\\SpotifyWebAppV2.0\\spotr\\static\refresh_token.txt'
2022-06-03 22:34:03.103741 TRACEBACK --> Traceback (most recent call last):
  File "e:\docs\phyton projects\SpotifyWebAppV2.0\spotr\spotify.py", line 34, in getNewAccessToken
    fileOpen = open(ROOT_DIR + "\static\refresh_token.txt", "r")
OSError: [Errno 22] Invalid argument: 'e:\\docs\\phyton projects\\SpotifyWebAppV2.0\\spotr\\static\refresh_token.txt'

2022-06-04 22:11:51.232890 err - spotify.py - getNewAccessToken1 --> <class 'FileNotFoundError'> - (2, 'No such file or directory') - [Errno 2] No such file or directory: 'e:\\docs\\phyton projects\\SpotifyWebAppV2.0\\spotr/static/refresh_token.txt'
2022-06-04 22:11:51.233890 TRACEBACK --> Traceback (most recent call last):
  File "e:\docs\phyton projects\SpotifyWebAppV2.0\spotr\spotify.py", line 36, in getNewAccessToken
    fileOpen = open(ROOT_DIR + "/static/refresh_token.txt", "r")
FileNotFoundError: [Errno 2] No such file or directory: 'e:\\docs\\phyton projects\\SpotifyWebAppV2.0\\spotr/static/refresh_token.txt'

2022-06-04 22:25:21.972451 err - spotify.py - getNewAccessToken1 --> <class 'FileNotFoundError'> - (2, 'No such file or directory') - [Errno 2] No such file or directory: 'e:\\docs\\phyton projects\\SpotifyWebAppV2.0\\spotr/static/refresh_token.txt'
2022-06-04 22:25:21.972451 TRACEBACK --> Traceback (most recent call last):
  File "e:\docs\phyton projects\SpotifyWebAppV2.0\spotr\spotify.py", line 37, in getNewAccessToken
    fileOpen = open(ROOT_DIR + "/static/refresh_token.txt", "r")
FileNotFoundError: [Errno 2] No such file or directory: 'e:\\docs\\phyton projects\\SpotifyWebAppV2.0\\spotr/static/refresh_token.txt'

2022-06-06 21:15:29.196671 msg - common.py - getTrackInfo --> requesting track info for trackID: 3OWAyHmNMACLPQNPEFEZNY
2022-06-06 21:15:29.211671 err - spotify.py - getNewAccessToken2 --> <class 'NameError'> - ("name 'requests' is not defined",) - name 'requests' is not defined
2022-06-06 21:15:29.211671 TRACEBACK --> Traceback (most recent call last):
  File "e:\docs\phyton projects\SpotifyWebAppV2.0\spotr\common.py", line 161, in getNewAccessToken
    response = requests.post(url, data=body_params, auth=(spotify_client_id, spotify_client_secret), verify=False)
NameError: name 'requests' is not defined

2022-06-06 21:15:29.212670 err - spotify.py - apiReqSpotify --> error getNewAccessToken()
2022-06-06 21:17:14.031371 msg - common.py - getTrackInfo --> requesting track info for trackID: 3OWAyHmNMACLPQNPEFEZNY
2022-06-06 21:18:01.035427 msg - common.py - getTrackInfo --> requesting track info for trackID: 3OWAyHmNMACLPQNPEFEZNY
2022-06-06 21:38:10.655726 msg - common.py - getTracksFromLikedList --> requesting tracks from liked list.
2022-06-06 21:40:51.203281 msg - common.py - getTracksFromLikedList --> requesting tracks from liked list.
2022-06-06 21:43:05.953544 msg - common.py - getTracksFromLikedList --> requesting tracks from liked list.
2022-06-06 21:43:39.288586 msg - common.py - getTracksFromLikedList --> requesting tracks from liked list.